data(concrete)
library(AppliedPredictiveModeling)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
training$index <- sample(1:nrow(training))
par(mfrow=c(3,3))
for(x in colnames(training)[colnames(training) != "index" & colnames(training) != "CompressiveStrength"]) plot(training$index, training$CompressiveStrength, col=cut2(training[,x]))
library(caret)
data(concrete)
library(AppliedPredictiveModeling)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
training$index <- 1:nrow(training)
par(mfrow=c(3,3))
for(x in colnames(training)[colnames(training) != "index" & colnames(training) != "CompressiveStrength"]) plot(training$index, training$CompressiveStrength, col=cut2(training[,x]))
for(x in colnames(training)[colnames(training) != "index" & colnames(training) != "CompressiveStrength"]) plot(training$index, training$CompressiveStrength, col=cut2(training[,x]), n=4)
?cut2
for(x in colnames(training)[colnames(training) != "index" & colnames(training) != "CompressiveStrength"]) plot(training$index, training$CompressiveStrength, col=cut2(training[,x]), g=4)
for(x in colnames(training)[colnames(training) != "index" & colnames(training) != "CompressiveStrength"]) plot(training$index, training$CompressiveStrength, col=cut2(training[,x], g=4))
library(caret)
data(concrete)
library(AppliedPredictiveModeling)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
training$index <- 1:nrow(training)
par(mfrow=c(3,3))
for(x in colnames(training)[colnames(training) != "index" & colnames(training) != "CompressiveStrength"]) plot(training$index, training$CompressiveStrength, col=cut2(training[,x], g=4))
colnames(training)
library(AppliedPredictiveModeling)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
training$row <- 1:nrow(training)
training$index <- rownames(training)
plot(training$index, training$row)
par(mfrow=c(1,1))
plot(training$index, training$row)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training[,grep("^IL", colnames(training))]
colnames(training[,grep("^IL", colnames(training))])
colnames(training) == colnames(training[,grep("^IL", colnames(training))])
colnames(training) %in% colnames(training[,grep("^IL", colnames(training))])
preProc <- preProcess(training[colnames(training) %in% colnames(training[,grep("^IL", colnames(training))])], method="pca", pcaComp=2)
trainPC <- predict(preProc, training[colnames(training) %in% colnames(training[,grep("^IL", colnames(training))])])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPc)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
plot(trainPC[,1], trainPC[,2])
plot(trainPC[,1], trainPC[,2], col=typeColor)
data(Spam)
data(spam)
?preProcess
preProcess(training[colnames(training) %in% colnames(training[,grep("^IL", colnames(training))])], method="pca", pcaComp=2)
?train
FALSE*1
table(AlzheimerDisease$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
table(adData$diagnosis)
?adData
?AlzheimersDisease
?AlzheimerDisease
data(AlzheimerDisease)
??AlzheimerDisease
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
?predictors
colnames(predictors)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
diagnosis
preProcess
?preProcess
ILnames <- colnames(training[,grep("^IL", colnames(training))])
ILnames
reduceddf <- training[,colnames(training) %in% ILnames]
reduceddf
reduceddf <- data.frame(training$diagnosis, training[,colnames(training) %in% ILnames])
head(redreduceddf)
head(reduceddf)
preProc <- preProcess(reduceddf[-1], method="pca", pcaComp=2)
preProc
summary(preProc)
preProc$std
preProc <- preProcess(reduceddf[-1], method="pca", var=0.9)
summary(preProc)
preProc
preProc <- preProcess(reduceddf[-1], method="pca", thresh=0.9)
preProc
?train
?predict
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILnames <- colnames(training[,grep("^IL", colnames(training))])
reduceddf <- data.frame(training$diagnosis, training[,colnames(training) %in% ILnames])
head(reduceddf)
training$diagnosis
modelFit <- train(diagnosis ~ ., method="glm", data="training")
modelFit <- train(diagnosis ~., method="glm", data="training")
modelFit <- train(diagnosis ~., data=training)
install.packages("e1071")
modelFit <- train(diagnosis ~., data=training)
modelFit <- train(diagnosis ~., data=training, method="glm")
warnings()
modelFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILnames <- colnames(training[,grep("^IL", colnames(training))])
reduceddf <- data.frame(training$diagnosis, training[,colnames(training) %in% ILnames])
model <- train(reduceddf$diagnosis ~., method="glm", data=reduceddf[,-1])
colnames(reduceddf)
model <- train(reduceddf[,1] ~., method="glm", data=reduceddf[,-1])
confusionMatrix(testing$diagnosis, predict(model))
?confusionMatrix
confusionMatrix(testing$diagnosis, model)
predict(model, testing)
confusionMatrix(predict(model, testing))
confusionMatrix(testing$diagnosis, predict(model, testing))
?createDataPartition
mtcars
head(mtcars)
model <- lm(mpg ~ ., data=mtcars)
model
-0.11144*4
mtcars$cyl
class(mtcars$cyl)
mtcars$cyl <- as.factor(mtcars$cyl)
class(mtcars$cyl)
model <- lm(mpg ~ ., data=mtcars)
model <- lm(mpg ~ ., data=mtcars)
model
model <- lm(mpg ~ cyl + wt, data=mtcars)
model
mww <- lm(mpg ~ cyl, data=mtcars)
mww
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
mww
model
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
dfbeta(y~x)
dfbeta(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbeta(lm(y~x))
dfbetas(lm(y~x))
data(mtcars)
fit1 <- lm(mpg ~ as.factor(cyl), data=mtcars)
fit2 <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
anova(fit1, fit2)
?anova
help(anova)
fit2 <- lm(mpg ~ as.factor(cyl) + wt + as.factor(cyl)*wt, data=mtcars)
fit1 <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
anova(fit1, fit2)
?mtcars
data(mtcars)
mtcars
model <- lm(mpg ~ ., data=mtcars)
model
class(mtcars$am)
?mtcars
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
class(mtcars)
class(mtcars[,1])
class(mtcars[,c(1:ncol(mtcars))])
help(mtcars)
head(mtcars)
clear
ls
ls()
ls()
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
heas(mtcars)
head(mtcars)
lm(mpg ~ ., data=mtcars)
model <- lm(mpg ~ ., data=mtcars)
mtcars[mtcars$vs == 0, ]
mtcars$vs[mtcars$vs == 0, ]
mtcars[mtcars$vs == 1, ]
mtcars[mtcars$vs == 1, ]$vs
mtcars[mtcars$vs == 1, ]$vs <- V
mtcars[mtcars$vs == 1, ]$vs <- "V"
?rep
mtcars[mtcars$vs == 1, ]$vs <- rep("V", length(mtcars[mtcars$vs == 1, ]))
mtcars[mtcars$vs == 1, ]$vs <- rep("V", length(mtcars[mtcars$vs == 1, ]$vs))
rep("V", length(mtcars[mtcars$vs == 1, ]$vs))
?gsub
gsub(0, "V", mtcars$vs)
mtcars
mtcars
gsub(0, "V", mtcars$vs)
mtcars
mtcars$vs <- gsub(0, "V", mtcars$vs)
mtcars$vs <- gsub(1, "S", mtcars$vs)
mtcars
class(mtcars$vs)
mtcars$vs <- gsub(0, "V", mtcars$vs)
mtcars$vs <- gsub(1, "S", mtcars$vs)
mtcars$am <- gsub(0, "A", mtcars$am)
mtcars$am <- gsub(1, "M", mtcars$am)
# V/S and Transmission are factor variables. Change from numeric.
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
# Fit the linear model using all the data
model <- lm(mpg ~ ., data=mtcars)
model
simpmodel <- lm(mpg ~ am, data=mtcars)
simpmodel
plot(mtcars$mpg, 1:nrow(mtcars))
plot(mtcars$mpg, 1:nrow(mtcars), colour=mtcars$am)
plot(mtcars$mpg, 1:nrow(mtcars), color=mtcars$am)
warnings()
library(ggplot2)
qplot(mtcars$mpg, 1:nrow(mtcars), color=mtcars$am)
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am)
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am) + geom_line(simpmodel)
?mtcars
head(mtcars)
head(mtcars, )
head(mtcars, 5)
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am)
library(ggplot2)
mtcars$vs <- gsub(0, "V", mtcars$vs)
mtcars$vs <- gsub(1, "S", mtcars$vs)
mtcars$am <- gsub(0, "A", mtcars$am)
mtcars$am <- gsub(1, "M", mtcars$am)
# V/S and Transmission are factor variables. Change from numeric.
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am)
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG")
?qplot
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + theme(legend.title="Transmission")
?theme
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + theme(title="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am) + theme(title="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + theme(legend.title=element_text("Transmission"))
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + theme(title="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + theme(title=element_text(Transmission))
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + theme(title=element_text("Transmission"))
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + guide_legend(title="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + scale_fill_discrete(title="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + scale_fill_discrete(name="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + scale_color_discrete(name="Transmission")
qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG") + scale_color_discrete(name="Transmission", labels=c("Automatic", "Manual"))
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG")
eplot + scale_color_discrete(name="Transmission", labels=c("Automatic", "Manual"))
simpmodel <- lm(mpg ~ am, data=mtcars)
eplot + abline(simpmodel)
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission", labels=c("Automatic", "Manual"))
```
A very basic model of fuel efficiency could be built by just using the transmission data.
```{r}
# Fit the model using only transmission
simpmodel <- lm(mpg ~ am, data=mtcars)
eplot <- eplot + abline(simpmodel)
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am, xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission", labels=c("Automatic", "Manual"))
eplot <- eplot + abline(simpmodel)
?abline
?geom_smooth
?with
simpmodel <- lm(mpg ~ am, data=mtcars)
eplot <- eplot + abline(simpmodel)
simpmodel <- lm(mpg ~ am, data=mtcars)
simpmodel
simpmodel$Coefficents
simpmodel$Coefficients
simpmodel$coefficients
simpmodel <- lm(mpg ~ am, data=mtcars)
simpmodel$coefficients
simpmodel$coefficients$(Intercept)
simpmodel$coefficients$Intercept
simpmodel$coefficients$amM
simpmodel$coefficients
simpmodel$coefficients[,1]
simpmodel$coefficients[1,]
simpmodel$coefficients[1,1
]
simpmodel$coefficients[1]
eplot <- eplot + geom_hline(simpmodel$coefficients[1]) + geom_hline(simpmodel$coefficients[2])
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot <- eplot + geom_hline(simpmodel$coefficients[1]) + geom_hline(simpmodel$coefficients[2])
eplot <- eplot + geom_hline(aes(yintercept=simpmodel$coefficients[1]))
eplot
eplot <- eplot + geom_hline(aes(yintercept=simpmodel$coefficients[1], colour="salmon"))
eplot
eplot <- eplot + geom_hline(aes(yintercept=simpmodel$coefficients[1], colour="A"))
eplot
eplot <- eplot + geom_hline(aes(yintercept=simpmodel$coefficients[1], colour=A))
eplot
eplot
eplot
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot
?theme
colours(0)
eplot$color
eplot$colour
eplot <- eplot + geom_smooth
?geom_smooth
eplot <- eplot + geom_smooth()
eplot
eplot <- eplot + geom_smooth(method="lm")
eplot
?geom_hline
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot <- eplot + geom_hline(aes(colour="salmon"))
eplot
eplot <- eplot + geom_hline(aes(colour="black"))
eplot
eplot <- eplot + geom_hline(20, group=1)
eplot
eplot <- eplot + geom_hline(aes(20, group=1))
eplot
eplot <- eplot + geom_hline(aes(y=20, group=1))
eplot
eplot <- eplot + geom_hline(aes(yintercept=20, group=1))
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot
eplot <- eplot + geom_hline(aes(yintercept=20, group=1))
eplot
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot
eplot <- eplot + geom_hline(aes(yintercept=20))
eplot
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot
eplot <- eplot + geom_hline(aes(yintercept=20), color="salmon")
eplot
xlab="Car", ylab="Fuel Eficiency / MPG")
scale_colour_brewer
scale_colour_brewer()
guide_colourbar
qplot
?qplot
geom_hline
?geom_hline
?geom_point
layer
scale_fill
scale_fill_automatic
scale_fill_manual
?scale_fill_manual
head(mtcars)
mtcars$vs <- gsub(0, "V", mtcars$vs); mtcars$vs <- gsub(1, "S", mtcars$vs)
mtcars$am <- gsub(0, "A", mtcars$am); mtcars$am <- gsub(1, "M", mtcars$am)
# V/S and Transmission are factor variables. Change from numeric.
mtcars$am <- as.factor(mtcars$am); mtcars$vs <- as.factor(mtcars$vs)
library(ggplot2)
eplot <- qplot(1:nrow(mtcars), mtcars$mpg, color=mtcars$am,
xlab="Car", ylab="Fuel Eficiency / MPG")
eplot <- eplot + scale_color_discrete(name="Transmission",
labels=c("Automatic", "Manual"))
eplot
eplot <- eplot + geom_hline(aes(yintercept=20), color="salmon")
eplot
model <- lm(mpg ~ am, data=mtcars)
model$coefficients
model2 <- lm(mpg ~ ., data=mtcars)
model2$coefficients
model$coefficients
model$coefficients[1] - model$coefficiets[2]
model$coefficients[1] - model$coefficients[2]
model
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILnames <- colnames(training[,grep("^IL", colnames(training))])
reduceddf <- data.frame(training$diagnosis, training[,colnames(training) %in% ILnames])
model <- train(reduceddf$diagnosis ~., method="glm", data=reduceddf[-1,])
reduceddf
colnames(reduceddf)
model <- train(reduceddf$training.diagnosis ~., method="glm", data=reduceddf[-1,])
model <- train(reduceddf$diagnosis ~., method="glm", data=reduceddf[-1,])
length(reduceddf$IL_11)
length(reduceddf$IL_13)
length(reduceddf$training.diagnosis)
reduceddf[-1]
head(reduceddf)
model <- train(training.diagnosis ~., method="glm", data=reduceddf)
model
sample(model)
summary(model)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILnames <- colnames(training[,grep("^IL", colnames(training))])
reduceddf <- data.frame(training$diagnosis, training[,colnames(training) %in% ILnames])
head(reduceddf)
modelFit <- train(diagnosis ~., data=training, method="glm")
warnings()
modelFit <- train(diagnosis ~., data=training, method="glm")
warnings()
modelFit
?preProcess
reduceddf
head(reduceddf)
preProcess(reduceddf[-1])
pca <- preProcess(reduceddf[-1])
summary(pca)
preProcess(reduceddf[-1], method="pca")
preProcess(reduceddf[-1], method="pca", pcaComp=9)
preProcess(reduceddf[-1], method="pca", thresh=80)
preProcess(reduceddf[-1], method="pca", thresh=0.8)
?rnorm
y <- rnorm(20)
y <- rnorm(10)
x
x <- c(repeat(1, 10), repeat(-1, 10))
x <- c(rep(1, 10), rep(-1, 10))
y <- rnorm(10)
x
y
x <- c(rep(1, 500), rep(-1, 500))
y <- rnorm(1000)
stddev(v)
sd(x)
sd(y)
mean(x)
mean(y)
hist(x)
(histy)
hist(y)
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='jackpeacock', token='FECC87DA7CEEA44BFE51B161EB0D97EE', secret='Um7UAssgFgarQ+WKqQnmLg9MBR/TcQoVDVH3qqsT')
setwd("./datasciencecoursera/developingdataprod//Course Project")
list.files()
deployApp()
?deployApp
getwd()
deployApp()
getwd()
setwd("./../")
getwd()
deployApp(appName="Course Project")
setwd("./Course Project/")
deployApp(appName="chelseaPredictor")
